@inject DialogService DialogService
@inject HttpClient HttpClient
@inject NotificationService NotificationService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<RadzenTemplateForm Data="@Group" Submit="@((Group args) => Submit(args))">
    <RadzenStack>
        <RadzenRow AlignItems="AlignItems.Center" class="mb-[25px]">
            <RadzenLabel Text="Назва групи" Component="GroupName" />
            <div style="width: 100%;display: block;">
                <RadzenTextBox @bind-Value="Group.GroupName" Placeholder="Введіть назву" Style="width: 100%;display: block;" Name="GroupName" MaxLength="25" />
                <RadzenRequiredValidator Component="GroupName" Text="Введіть назву групи" Popup="true" Style="position: absolute" />
                <RadzenCustomValidator Component="GroupName" Validator="@(() => ValidateGroupNameWrapper(Group.GroupName))" Text="Група з такою назвою вже існує"
                                       Popup="true" Style="position: absolute" />
            </div>
        </RadzenRow>
        <RadzenRow AlignItems="AlignItems.Center" class="mb-[25px]">
            <div class="">
                <RadzenLabel Text="Факультет" Component="DropDownDataGridBindValue" />
            </div>

            <div style="width: 100%;display: block;">
                <RadzenDropDownDataGrid @bind-Value="Group.GroupFacultyId" TextProperty="FacultyName" ValueProperty="FacultyId" Data=@Faculties
                                        Style="width:100%;display:block;" Name="DropDownDataGridBindValue" SearchTextPlaceholder="Пошук..." Density="Density.Compact">
                    <Columns>
                        <RadzenDropDownDataGridColumn Property="FacultyName" Title="Назва факультету" Width="200px" />
                    </Columns>
                </RadzenDropDownDataGrid>
                <RadzenCompareValidator Value="0" Component="DropDownDataGridBindValue"
                                        Text="Виберіть факультет" Popup=true Style="position: absolute" Operator=CompareOperator.NotEqual />
            </div>
        </RadzenRow>
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-4">
        <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Text="Зберегти" />
        <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Text="Скасувати" Click="@Cancel" />
    </RadzenStack>
</RadzenTemplateForm>



@code {
    private Group Group { get; set; } = new();
    private List<Faculty>? Faculties { get; set; }

    [Parameter]
    public Group GroupParameter { get; set; } = new();
    [Parameter]
    public List<Group>? Groups { get; set; }
    [Parameter]
    public PagerProperties? PagerProperties { get; set; }



    protected override async Task OnInitializedAsync()
    {
        Group.GroupId = GroupParameter.GroupId;
        Group.GroupName = GroupParameter.GroupName;
        Group.GroupFacultyId = GroupParameter.GroupFacultyId;

        Faculties = await HttpClient.GetFromJsonAsync<List<Faculty>>("api/Faculty/GetFaculties")  ?? new List<Faculty>();

        Faculties = Faculties.OrderBy(f => f.FacultyName).ToList();
    }

    async Task Submit(Group args)
    {
        bool IsConfirmed = await DialogService.Confirm("Ви дійсно хочете оновити дані?", "Ви впевнені?",
                        new ConfirmOptions() { AutoFocusFirstElement = false, OkButtonText = "Так", CancelButtonText = "Ні" }) ?? false;

        if (IsConfirmed)
        {
            var response = await HttpClient.PutAsJsonAsync<Group>($"api/Group/UpdateGroup", args);
            var result = await response.Content.ReadFromJsonAsync<int>();

            if (result > 0)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Успіх!",
                        Detail = "Дані були успішно оновлені",
                        Duration = 5000
                    });

                if(PagerProperties is not null)
                {
                    var list = await GetGroups(PagerProperties.Skip, PagerProperties.PageSize);
                    Groups?.Clear();
                    Groups?.AddRange(list);
                }
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Помилка!",
                        Detail = "Дані не були оновленими",
                        Duration = 10000
                    });
            }

            DialogService.Close(true);
        }
    }

    void Cancel() => DialogService.Close(false);

    async Task<bool> ValidateGroupName(string groupName)
    {
        if (GroupParameter.GroupName == groupName) return true;
        if (Groups?.Find(g => g.GroupName == groupName) is not null) return false;

        var group = await HttpClient.GetFromJsonAsync<int>($"api/Group/GetGroupByName?groupName={groupName}");
        if (group > 0) return false;
        return true;
    }

    bool ValidateGroupNameWrapper(string groupName)
    {
        var result = Task.Run(() => ValidateGroupName(groupName));
        result.Wait();
        return result.Result;
    }

    async Task<List<Group>> GetGroups(int skip, int take)
    {
        var response = await HttpClient.GetFromJsonAsync<List<Group>>($"api/Group/GetGroups?skip={skip}&take={take}");
        if (response is null) Navigation.NavigateTo("/404");
        return response!;
    }
}
