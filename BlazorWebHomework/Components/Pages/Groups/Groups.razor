@page "/groups"
@inject HttpClient HttpClient
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Групи</PageTitle>
<h3 class="tracking-widest text-4xl font-black text-gray-900 dark:text-white py-[20px] pl-[24px] bg-white shadow-sm">Групи</h3>

<article class="content px-4">

    <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Style="position:relative;" class="my-[25px]">
        <RadzenButton id="add-button" style="border-radius: 25px;position:absolute;left:0px;" Icon="add" Text="Добавити" Click="CreateGroup"
                      class="bg-gradient-to-r from-purple-500 to-pink-500 rounded-[25px] hover:bg-black"></RadzenButton>

        <RadzenStack class="mx-[175px] max-w-[550px] w-full gap-x-6" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenTextBox class="max-w-[400px] w-full" @bind-Value=SearchText>
            </RadzenTextBox>
            <RadzenButton Text="Пошук" class="w-[85px] min-w-[85px]" Click="Search">
            </RadzenButton>
        </RadzenStack>
    </RadzenRow>

    @if (groups == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th><div class="flex justify-content-center">ID</div></th>
                    <th>Група</th>
                    <th>Факультет</th>
                    <th>К-сть студентів</th>
                    <th>Середній бал групи</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var group in groups)
                {
                    <tr>
                        <td class="groups__data min-w-[50px] max-w-[50px] w-[50px]">
                            <div class="groups__data-id font-extrabold ">
                                @group.GroupId
                            </div>
                        </td>
                        <td class="groups__data w-[175px]">@group.GroupName</td>
                        <td class="groups__data max-w-[750px]" style="word-break:break-word">@group.GroupFacultyName</td>
                        <td class="groups__data w-[175px]">@group.GroupNumStudents</td>
                        <td class="groups__data w-[175px]">@group.GroupAvgScore</td>
                        <td class="groups__data w-1/6">
                            <div class="groups__data-block flex justify-content-center">
                                <RadzenButton Click="(x => EditGroup(group))">Редагувати</RadzenButton>

                                <RadzenButton Click="(x => ConfirmDelete(group.GroupId))"
                                              id="delete-button" class="bg-red-500">Видалити</RadzenButton>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <RadzenPager ShowPagingSummary="true" PagingSummaryFormat="@pagingSummaryFormat" 
                HorizontalAlign="HorizontalAlign.Right" Count="pagerProperties.Count" PageSize="pagerProperties.PageSize" PageNumbersCount="5" PageChanged="@PageChanged" />
    }
</article>

@code {
    List<Group> groups = new List<Group>();
    string pagingSummaryFormat = "Поточна сторінка {0} з {1} (загалом {2} записів)";
    PagerProperties pagerProperties = new() { PageSize = 5};
    string? SearchText { get; set; }



    protected override async Task OnInitializedAsync()
    {
        try
        {
            pagerProperties.Count = await HttpClient.GetFromJsonAsync<int?>($"api/Group/GetCount?searchText={SearchText}") ?? 0;

            groups = await GetGroups(pagerProperties.Skip, pagerProperties.PageSize);
        }
        catch (Exception)
        {
            Navigation.NavigateTo("/404");
        }
    }

    async Task Search()
    {

        groups = await GetGroups(0, pagerProperties.PageSize);
        pagerProperties.Count = await HttpClient.GetFromJsonAsync<int?>($"api/Group/GetCount?searchText={SearchText}") ?? 0;
    }

    async Task PageChanged(PagerEventArgs args)
    {
        pagerProperties.Skip = args.Skip;
        groups = await GetGroups(args.Skip, args.Top)!;
        pagerProperties.Count = await HttpClient.GetFromJsonAsync<int?>($"api/Group/GetCount?searchText={SearchText}") ?? 0;
    }

    async Task<List<Group>> GetGroups(int skip, int take)
    {
        var response = await HttpClient.GetFromJsonAsync<List<Group>>($"api/Group/GetGroups?skip={skip}&take={take}&searchText={SearchText}");
        if (response is null) Navigation.NavigateTo("/404");
        return response!;
    }

    async Task CreateGroup()
    {
        var response = await DialogService.OpenAsync<CreateGroup>("Добавити групу", new Dictionary<string, object> 
                        { { "Groups", groups }, { "Skip", pagerProperties.Skip }, { "Take", pagerProperties.PageSize }, { "PagerProperties", pagerProperties }/* , { "Count", count} */ });
    }

    async Task EditGroup(Group Group)
    {
        var response = await DialogService.OpenAsync<EditGroup>("Редагувати групу", new Dictionary<string, object> { { "GroupParameter", Group }, { "Groups", groups }, { "PagerProperties", pagerProperties } },
            new DialogOptions() { AutoFocusFirstElement = false });
    }

    async Task ConfirmDelete(int groupId)
    {
        bool IsConfirmed = await DialogService.Confirm("Ви дійсно хочете видалити вибраний рядок?", "Ви впевнені?",
                                new ConfirmOptions() { AutoFocusFirstElement = false, OkButtonText = "Так", CancelButtonText = "Ні" }) ?? false;

        if (IsConfirmed)
        {
            var result = await HttpClient.DeleteFromJsonAsync<int>($"api/Group/DeleteGroup?groupId={groupId}");

            if (result == 1)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Успіх!",
                        Detail = "Дані були успішно видалені",
                        Duration = 5000
                    });

                // if ((pagerProperties.Count - pagerProperties.Skip) > pagerProperties.PageSize)
                // {
                //     groups = await GetGroups(pagerProperties.Skip, pagerProperties.PageSize);
                //     pagerProperties.Count -= 1;
                // } else
                //     groups = await GetGroups(pagerProperties.Skip, pagerProperties.PageSize);
                //     pagerProperties.Count -= 1;

                if ((pagerProperties.Count - pagerProperties.Skip) == 1)
                {
                    groups = await GetGroups((pagerProperties.Skip - pagerProperties.PageSize), pagerProperties.PageSize);
                    pagerProperties.Count -= 1;
                }
                else
                {
                    groups = await GetGroups(pagerProperties.Skip, pagerProperties.PageSize);
                    pagerProperties.Count -= 1;
                }
            }
        }
    }
}