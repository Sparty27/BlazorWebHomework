@page "/students"
@inject HttpClient HttpClient
@inject DialogService DialogService
@inject NotificationService NotificationService
@rendermode InteractiveServer

<PageTitle>Студенти</PageTitle>
<h3 class="tracking-widest text-4xl font-black text-gray-900 dark:text-white py-[20px] pl-[24px] bg-white shadow-sm page-header">Студенти</h3>

<article class="content px-4">
    <RadzenButton id="add-button" style="border-radius: 25px;" Icon="add" Text="Добавити" Click="CreateStudent"
                  class="bg-gradient-to-r from-purple-500 to-pink-500 my-[25px] rounded-[25px] hover:bg-black"></RadzenButton>

    @if (students == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <RadzenDataGrid @ref="grid" AllowFiltering="false" AllowColumnResize="true" AllowAlternatingRows="false" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                        Data="@students" TItem="Student" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
            <Columns>
                <RadzenDataGridColumn TItem="Student" Property="StudentId" Filterable="false" Title="ID" Frozen="true" Width="75px" TextAlign="TextAlign.Center"/>
                <RadzenDataGridColumn TItem="Student" Property="StudentRegistrationDate" Title="Дата реєстрації" FormatString="{0:d}" Width="160px" />
                <RadzenDataGridColumn TItem="Student" Property="StudentLastName" Title="Прізвище" Width="160px" />
                <RadzenDataGridColumn TItem="Student" Property="StudentFirstName" Title="Ім'я" Width="160px" />
                <RadzenDataGridColumn TItem="Student" Property="StudentGroupName" Title="Група" Width="160px" />
                <RadzenDataGridColumn TItem="Student" Property="StudentAvgScore" Title="Середній бал" Width="160px" />
                <RadzenDataGridColumn Sortable="false" TItem="Student" Title="Інформація" Width="80px" TextAlign="TextAlign.Center">
                    <Template Context="data" >
                        <RadzenButton ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="info" class="m-1" Click=@(() => OpenStudentInfo(data)) />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>


@*         <table class="table">
            <thead>
                <tr>
                    <th><div class="flex justify-content-center">ID</div></th>
                    <th>Дата реєстрації</th>
                    <th>Прізвище</th>
                    <th>Ім'я</th>
                    <th>Група</th>
                    <th>Середній бал</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var student in students)
                {
                    <tr>
                        <td class="students__data min-w-[50px]">
                            <div class="students__data-id font-extrabold ">
                                @student.StudentId
                            </div>
                        </td>
                        <td class="students__data w-1/5">@student.StudentRegistrationDate.ToLongDateString()</td>
                        <td class="students__data w-1/5">@student.StudentLastName</td>
                        <td class="students__data w-1/5">@student.StudentFirstName</td>
                        <td class="students__data w-1/5">@student.StudentGroupName</td>
                        <td class="students__data w-1/5">@student.StudentAvgScore</td>
                        <td class="students__data w-1/6">
                            <div class="students__data-block flex justify-content-center">
                                <RadzenButton Click="(x => EditStudent(student))">Редагувати</RadzenButton>

                                <RadzenButton Click="(x => ConfirmDelete(student.StudentId))" id="delete-button-student"
                                              class="bg-red-500 delete-button-student">Видалити</RadzenButton>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table> *@
    }
</article>

@code {
    RadzenDataGrid<Student> grid;
    List<Student> students = new List<Student>();

    protected override async Task OnInitializedAsync()
    {
        students = await HttpClient.GetFromJsonAsync<List<Student>>("api/Student/GetAllStudents") ?? new List<Student>();
    }

    async Task CreateStudent()
    {
        var response = await DialogService.OpenAsync<CreateStudent>("Добавити студента", new Dictionary<string, object> { { "Students", students } });        
    }

    async Task EditStudent(Student student)
    {
        var response = await DialogService.OpenAsync<EditStudent>("Редагувати студента", new Dictionary<string, object> { { "StudentParameter", student }, { "Students", students } },
                                                new DialogOptions() { AutoFocusFirstElement = false });
    }

    async Task ConfirmDelete(int studentId)
    {
        bool IsConfirmed = await DialogService.Confirm("Ви дійсно хочете видалити вибраний рядок?", "Ви впевнені?",
                        new ConfirmOptions() { AutoFocusFirstElement = false, OkButtonText = "Так", CancelButtonText = "Ні" }) ?? false;

        if (IsConfirmed)
        {
            var result = await HttpClient.DeleteFromJsonAsync<int>($"api/Student/DeleteStudent?studentId={studentId}");

            if (result > 1)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Успіх!",
                    Detail = "Дані були успішно видалені",
                    Duration = 5000
                });

                var student = students.FirstOrDefault(f => f.StudentId == studentId);

                if (student is not null) students.Remove(student);
            }
        }
    }

    async Task OpenStudentInfo(Student student)
    {
        var response = await DialogService.OpenAsync<StudentInfo>("Інформація про студента", new Dictionary<string, object> { { "Student", student }, { "Students", students }, { "Grid", grid } },
                                        new DialogOptions() { AutoFocusFirstElement = false });
    }
}
