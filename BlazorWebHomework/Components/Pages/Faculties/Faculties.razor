@page "/faculties"
@inject HttpClient HttpClient
@inject DialogService DialogService
@inject NotificationService NotificationService
@rendermode InteractiveServer

<PageTitle>Факультети</PageTitle>
<h3 class="tracking-widest text-4xl font-black text-gray-900 dark:text-white py-[20px] pl-[24px] bg-white shadow-sm">Факультети</h3>

<article class="content px-4">
    <RadzenButton id="add-button" style="border-radius: 25px;" Icon="add" Text="Добавити" Click="CreateFaculty"
                  class="bg-gradient-to-r from-purple-500 to-pink-500 my-[25px] rounded-[25px] hover:bg-black"></RadzenButton>

    @if (faculties == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th><div class="flex justify-content-center">ID</div></th>
                    <th>Факультет</th>
                    <th>Примітка</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var faculty in faculties)
                {
                    <tr>
                        <td class="faculties__data min-w-[50px]">
                            <div class="faculties__data-id font-extrabold ">
                                @faculty.FacultyId
                            </div>
                        </td>
                        <td class="faculties__data max-w-[750px]" style="word-break:break-word">@faculty.FacultyName</td>
                        <td class="faculties__data max-w-[200px]">@faculty.FacultyNotes</td>
                        <td class="faculties__data w-1/6">
                            <div class="faculties__data-block flex justify-content-center">
                                <RadzenButton Click="(x => EditFaculty(faculty))">Редагувати</RadzenButton>

                                <RadzenButton Click="(x => ConfirmDelete(faculty.FacultyId))"
                                        id="delete-button-faculty" class="bg-red-500 delete-button-faculty">Видалити</RadzenButton>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</article>

@code {
    List<Faculty> faculties = new List<Faculty>();

    protected override async Task OnInitializedAsync()
    {
        faculties = await HttpClient.GetFromJsonAsync<List<Faculty>>("api/Faculty/GetFaculties") ?? new List<Faculty>();
    }

    async Task CreateFaculty()
    {
        var response = await DialogService.OpenAsync<CreateFaculty>("Добавити факультет", new Dictionary<string, object> { { "Faculties", faculties } });
    }

    async Task EditFaculty(Faculty faculty)
    {
        var response = await DialogService.OpenAsync<EditFaculty>("Редагувати факультет", new Dictionary<string, object> { { "FacultyParameter", faculty }, { "Faculties", faculties} },
            new DialogOptions() { AutoFocusFirstElement = false });
    }

    async Task ConfirmDelete(int facultyId)
    {
        bool IsConfirmed = await DialogService.Confirm("Ви дійсно хочете видалити вибраний рядок?", "Ви впевнені?",
                                new ConfirmOptions() { AutoFocusFirstElement = false, OkButtonText = "Так", CancelButtonText = "Ні" }) ?? false;

        if (IsConfirmed)
        {
            var result = await HttpClient.DeleteFromJsonAsync<int>($"api/Faculty/DeleteFaculty?facultyId={facultyId}");

            if (result == 1)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, 
                    Summary = "Успіх!", Detail = "Дані були успішно видалені", Duration = 5000});

                var faculty = faculties.FirstOrDefault(f => f.FacultyId == facultyId);

                if (faculty is not null) faculties.Remove(faculty);
            }
        }
    }
}
