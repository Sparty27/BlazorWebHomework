@page "/faculties"
@inject HttpClient HttpClient
@inject DialogService DialogService
@inject NotificationService NotificationService
@rendermode InteractiveServer

<PageTitle>Факультети</PageTitle>
<h3 class="tracking-widest text-4xl font-black text-gray-900 dark:text-white py-[20px] pl-[24px] bg-white shadow-sm faculties__header">Факультети</h3>

<article class="content px-4">
    <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Style="position:relative;" class="my-[25px]">
        <RadzenButton id="add-button" style="border-radius: 25px;position:absolute;left:0px;" Icon="add" Text="Добавити" Click="CreateFaculty"
                      class="bg-gradient-to-r from-purple-500 to-pink-500 rounded-[25px] hover:bg-black"></RadzenButton>

        <RadzenStack class="mx-[175px] max-w-[500px] w-full gap-x-6" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenTextBox class="max-w-[400px] w-full" @bind-Value=SearchText Placeholder="Факультет комп'ютерних...">
            </RadzenTextBox>
            <RadzenButton Text="Пошук" class="w-[85px] min-w-[85px]" Click="Search">
            </RadzenButton>
        </RadzenStack>
    </RadzenRow>

    @if (faculties == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <RadzenDataGrid @ref="grid" AllowFiltering="false" AllowColumnResize="true" AllowAlternatingRows="false" AllowSorting="true"
                        PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                        PagingSummaryFormat="Сторінка {0} з {1} ({2} рядків)" class="mb-[50px]"
                        Data="@faculties" TItem="Faculty" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
            <Columns>
                <RadzenDataGridColumn TItem="Faculty" Property="FacultyId" Filterable="false" Title="ID" Frozen="true" Width="75px" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn TItem="Faculty" Property="FacultyName" Title="Факультет" Width="300px" />
                <RadzenDataGridColumn TItem="Faculty" Property="FacultyDepartments" Title="Кафедри" Width="300px" Sortable="false">
                    <Template Context="data">
                        <ul>
                            @foreach (string department in data.FacultyDepartments.Split("&&"))
                            {
                                <li class="faculty-department-data">@department</li>
                            }
                        </ul>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Faculty" Property="FacultyNotes" Title="Примітка" Width="300px" Sortable="false">
                    <Template Context="data">
                        <p style="white-space:pre-wrap;">
                            @data.FacultyNotes
                        </p>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Sortable="false" TItem="Faculty" Title="Інформація" Width="200px" TextAlign="TextAlign.Center">
                    <Template Context="data">
                        <RadzenButton ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="info" class="m-1" Click=@(() => OpenFacultyInfo(data)) />
                        <RadzenButton Icon="query_stats" Text="Діаграма"
                                      class="m-1 bg-gradient-to-r from-purple-500 to-pink-500 my-[25px]  hover:bg-black"  
                                      Click=@(() => OpenDiagram(data.FacultyId, data.FacultyName)) />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

@*         <table class="table">
            <thead>
                <tr>
                    <th><div class="flex justify-content-center">ID</div></th>
                    <th>Факультет</th>
                    <th>Примітка</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var faculty in faculties)
                {
                    <tr>
                        <td class="faculties__data min-w-[50px]">
                            <div class="faculties__data-id font-extrabold ">
                                @faculty.FacultyId
                            </div>
                        </td>
                        <td class="faculties__data max-w-[750px]" style="word-break:break-word">@faculty.FacultyName</td>
                        <td class="faculties__data max-w-[200px]">@faculty.FacultyNotes</td>
                        <td class="faculties__data w-1/6">
                            <div class="faculties__data-block flex justify-content-center">
                                <RadzenButton Click="(x => EditFaculty(faculty))">Редагувати</RadzenButton>

                                <RadzenButton Click="(x => ConfirmDelete(faculty.FacultyId))"
                                        id="delete-button-faculty" class="bg-red-500 delete-button-faculty">Видалити</RadzenButton>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table> *@
    }
</article>

@code {
    string? SearchText { get; set; }
    List<Faculty> faculties = new List<Faculty>();
    RadzenDataGrid<Faculty> grid;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            faculties = await HttpClient.GetFromJsonAsync<List<Faculty>>("api/Faculty/GetAllFaculties") ?? new List<Faculty>();

            // var task = Task.Run(() =>
            // {
            // var req = HttpClient.GetFromJsonAsync<List<Faculty>>("api/Faculty/GetAllFaculties");
            // if (!req.Wait(1000))
            //     throw new TaskCanceledException(req);
            // });

            // task.Wait();
        }
        catch(Exception)
        {
            Navigation.NavigateTo("/404");
        }
    }

    async Task CreateFaculty()
    {
        var response = await DialogService.OpenAsync<CreateFaculty>("Добавити факультет", 
                new Dictionary<string, object> { { "Faculties", faculties }, { "Grid", grid } });
    }

    async Task OpenFacultyInfo(Faculty faculty)
    {
        var response = await DialogService.OpenAsync<FacultyInfo>("Інформація про факультет",
                new Dictionary<string, object> { { "Faculty", faculty }, { "Faculties", faculties }, { "Grid", grid } },
                new DialogOptions() { AutoFocusFirstElement = false });
    }

    async Task OpenDiagram(int facultyId, string facultyName)
    {
        var groups = await HttpClient.GetFromJsonAsync<List<Group>>($"api/Group/GetGroupsByFacultyId?facultyId={facultyId}") ?? new();
        bool noData = false;

        if (groups.Count != 0)
        {
            var result = groups.FindLast(g => g.GroupAvgScore != 0);
            if (result is not null) noData = false;
            else noData = true;
        }
        else noData = true;

        var response = await DialogService.OpenAsync<FacultyDiagram>("Діаграми",
        new Dictionary<string, object> { /* { "FacultyIdParameter", facultyId }, */ { "FacultyNameParameter", facultyName }, { "Groups", groups }, { "NoData", noData } },
        new DialogOptions() { AutoFocusFirstElement = false, Resizable=true });
    }

    async Task Search()
    {

        faculties = await HttpClient.GetFromJsonAsync<List<Faculty>>($"api/Faculty/GetAllFaculties?searchText={SearchText}") ?? new List<Faculty>();
        grid?.Reload();
    }
}
